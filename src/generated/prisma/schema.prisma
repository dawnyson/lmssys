// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          Role            @default(Learner)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  // ðŸ”— Relations
  createdCourses   Course[]
  enrollments      Enrollment[]
  courseProgresses CourseProgress[]
  lessonProgresses LessonProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Role {
  Administrator
  Learner
  Instructor
  Manager
  Officer
}

model Course {
  id           String           @id @default(cuid())
  title        String
  description  String
  thumbnailUrl String
  createdBy    String
  creator      User             @relation(fields: [createdBy], references: [id])
  lessons      Lesson[]
  enrollments  Enrollment[]
  progress     CourseProgress[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model CourseProgress {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  updatedAt   DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model Lesson {
  id        String   @id @default(cuid())
  courseId  String
  title     String
  videoUrl  String
  duration  Int
  order     Int
  quiz      Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course       Course              @relation(fields: [courseId], references: [id])
  interactives LessonInteractive[]
  quizzes      LessonQuiz[]
  progress     LessonProgress[]
}

model LessonProgress {
  id              String    @id @default(cuid())
  userId          String
  lessonId        String
  watchedDuration Int
  isCompleted     Boolean   @default(false)
  completedAt     DateTime?
  updatedAt       DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])
}

model LessonInteractive {
  id        String @id @default(cuid())
  lessonId  String
  timestamp Int
  type      String
  content   String

  lesson Lesson @relation(fields: [lessonId], references: [id])
}

model LessonQuiz {
  id       String @id @default(cuid())
  lessonId String
  question String

  lesson  Lesson             @relation(fields: [lessonId], references: [id])
  choices LessonQuizChoice[]
}

model LessonQuizChoice {
  id         String  @id @default(cuid())
  quizId     String
  choiceText String
  isCorrect  Boolean

  quiz LessonQuiz @relation(fields: [quizId], references: [id])
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}
